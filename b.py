from telegram import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import CommandHandler, MessageHandler, filters, CallbackQueryHandler, Application
import sqlite3
from urllib.parse import urlparse
import random

TOKEN = "7691305676:AAEiV9vqm2cqCMq-ZJbxWm_6QtnuvzsaAW0"

def get_db_connection():
    conn = sqlite3.connect('links.db')
    conn.row_factory = sqlite3.Row
    return conn

def create_table():
    with get_db_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS links (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT,
            url TEXT,
            rating INTEGER,
            tags TEXT
        )
        """)
        conn.commit()

create_table()

def get_domain(url):
    parsed_url = urlparse(url)
    return parsed_url.netloc

async def start(update, context):
    keyboard = [
        [KeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏")],
        [KeyboardButton("üìã –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏")],
        [KeyboardButton("üé≤ –®–∞—Ä–∞")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç! –í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=reply_markup)

async def handle_add(update, context):
    await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –¥–∞–Ω—ñ —É —Ñ–æ—Ä–º–∞—Ç—ñ: –ù–∞–∑–≤–∞, –ü–æ—Å–∏–ª–∞–Ω–Ω—è, –û—Ü—ñ–Ω–∫–∞, –¢–µ–≥–∏")

async def handle_view(update, context):
    await show_page(update, context, page=1)

async def handle_random(update, context):
    with get_db_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT name, url, rating, tags FROM links")
        rows = cursor.fetchall()
        if rows:
            random_record = random.choice(rows)
            response = f"–ù–∞–∑–≤–∞: {random_record[0]}\n–û—Ü—ñ–Ω–∫–∞: {random_record[2]}\n–¢–µ–≥–∏: {random_record[3]}\n\n–ü–æ—Å–∏–ª–∞–Ω–Ω—è: [–¢—ã–∫]({random_record[1]})"
        else:
            response = "–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –ø—É—Å—Ç–∞."
    await update.message.reply_text(response, parse_mode="Markdown")

async def show_page(update, context, page=1):
    with get_db_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT name, url, rating, tags FROM links LIMIT 5 OFFSET ?", ((page - 1) * 5,))
        rows = cursor.fetchall()
        if rows:
            response = "\n\n".join(
                [f"–ù–∞–∑–≤–∞: {row[0]}\n–û—Ü—ñ–Ω–∫–∞: {row[2]}\n–¢–µ–≥–∏: {row[3]}\n–ü–æ—Å–∏–ª–∞–Ω–Ω—è: [–¢—ã–∫]({row[1]})" for row in rows]
            )
        else:
            response = "–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –ø—É—Å—Ç–∞."
        keyboard = []
        if page > 1:
            keyboard.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"page_{page-1}"))
        cursor.execute("SELECT COUNT(*) FROM links")
        total_records = cursor.fetchone()[0]
        if page * 5 < total_records:
            keyboard.append(InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"page_{page+1}"))
        if keyboard:
            reply_markup = InlineKeyboardMarkup([keyboard])
            if update.callback_query:
                await update.callback_query.message.edit_text(response, reply_markup=reply_markup, parse_mode="Markdown")
                await update.callback_query.answer()
            else:
                await update.message.reply_text(response, reply_markup=reply_markup, parse_mode="Markdown")
        else:
            await update.message.reply_text(response, parse_mode="Markdown")

async def paginate(update, context):
    query = update.callback_query
    page = int(query.data.split("_")[1])
    await show_page(update, context, page=page)
    await query.answer()

async def add_link(update, context):
    try:
        data = update.message.text.split(",", 3)
        if len(data) == 4:
            name, url, rating, tags = map(str.strip, data)
            rating = int(rating)
            with get_db_connection() as conn:
                cursor = conn.cursor()
                cursor.execute("INSERT INTO links (name, url, rating, tags) VALUES (?, ?, ?, ?)", (name, url, rating, tags))
                conn.commit()
            await update.message.reply_text("–°—Å–∏–ª–∫–∞ —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–∞!")
        else:
            await update.message.reply_text("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: –ù–∞–∑–≤–∞, –ü–æ—Å–∏–ª–∞–Ω–Ω—è, –û—Ü—ñ–Ω–∫–∞, –¢–µ–≥–∏")
    except ValueError:
        await update.message.reply_text("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –æ—Ü—ñ–Ω–∫–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Ü—ñ–ª–µ —á–∏—Å–ª–æ –¥–ª—è –æ—Ü—ñ–Ω–∫–∏.")
    except Exception as e:
        await update.message.reply_text(f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: {e}")

def main():
    application = Application.builder().token(TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.Text("‚ûï –î–æ–¥–∞—Ç–∏"), handle_add))
    application.add_handler(MessageHandler(filters.Text("üìã –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏"), handle_view))
    application.add_handler(MessageHandler(filters.Text("üé≤ –®–∞—Ä–∞"), handle_random))
    application.add_handler(MessageHandler(filters.Text(), add_link))
    application.add_handler(CallbackQueryHandler(paginate, pattern=r"^page_\d+$"))
    application.run_polling()

if __name__ == "__main__":
    main()
